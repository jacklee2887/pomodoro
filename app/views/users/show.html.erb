<p id="time_remaining"></p>
<p id="alert_message"></p>

<%= form_with url: task_search_path do |form| %>
  <%= form.text_field :description %>
  <%= form.submit 'Search!'%>
<% end %>

<h1 id="search_table_title"></h1>
<table>
	<thead id="search_table_head">
		
	</thead>
	<tbody id="search_table_body">
		
	</tbody>
</table>

<h1>Currently In Progress:</h1>
<table>
	<theader>
		<tr>
			<th>No.</th>
			<th>Description</th>
			<th>Progress</th>
			<th>Tomatoes Grown</th>
		</tr>
	</theader>
	<tbody>
		<% number = 0%>
		<% Task.all.each do |task| %>
			<% if task.user_id == current_user.id && task.in_progress && !task.completion %>
				<tr>
					<td><%= number += 1 %></td><td><%= task.description%></td>
					<td><%= task.in_progress ? 'In Progress' : 'Pending' %></td>
					<td><%= task.tomatoes.where(:completion => true).count %></td>
					<td><button class='plant-seed-button' data-taskid='<%=task.id%>'>Plant a seed!</button></td>
					<td><%= button_to 'Stop', task_path(task), method: :patch %></td>
					<td><%= button_to 'Complete', task_complete_path(task), method: :patch%></td>
				</tr>
			<% end %>
		<% end %>
	</tbody>
</table>

<h1> To-Do List:</h1>
<table>
	<thead>	
		<tr>
			<th>No.</th>
			<th>Description</th>
			<th>Progress</th>
			<th>Status</th>
			<th>Tomatoes Grown</th>
		</tr>
	</thead>

	<tbody>
		<% number = 0%>
		<% @all_tasks.each do |task| %>
			<% if task.user_id == current_user.id && !task.in_progress && !task.completion %>
				<tr>
					<td><%= number += 1 %></td>
					<td><%= task.description%></td>
					<td><%= task.in_progress ? 'In Progress' : 'Pending' %></td>
					<td><%= task.completion ? 'Completed' : 'Incomplete'%></td>
					<td><%= task.tomatoes.where(:completion => true).count %></td>
					<td><%= button_to 'Start', task_path(task), method: :patch%></td>
					<td><%= button_to 'Complete', task_complete_path(task), method: :patch %></td>
					<td><%= button_to 'Delete', task_path(task), method: :delete%></td>
				</tr>
			<% end %>
		<% end %>
	</tbody>
</table>

<h2> Daily Tomatoes: <%= current_user.tomatoes.where(:completion => true, created_at: Time.now.beginning_of_day..Time.now.end_of_day).count %> </h2>
<h2> Weekly Tomatoes: <%= current_user.tomatoes.where(:completion => true, created_at: Time.now.beginning_of_week..Time.now.end_of_week).count %></h2>
<h2> Monthly Tomatoes: <%= current_user.tomatoes.where(:completion => true, created_at: Time.now.beginning_of_month..Time.now.end_of_month).count %></h2>
<h2> Total Tomatoes this year: <%= current_user.tomatoes.where(:completion => true, created_at: Time.now.beginning_of_year..Time.now.end_of_year).count %> </h2>

<h1> Completed:</h1>
<table>
	<thead>	
		<tr>
			<th>No.</th>
			<th>Description</th>
			<th>Progress</th>
			<th>Status</th>
			<th>Tomatoes Grown</th>
		</tr>
	</thead>

	<tbody>
		<% number = 0%>
		<% @all_tasks.each do |task| %>
			<% if task.user_id == current_user.id && task.completion%>
				<tr>
					<td><%= number += 1 %></td>
					<td><%= task.description%></td>
					<td><%= task.completion ? 'Completed' : 'Incomplete'%></td>
					<td><%= task.tomatoes.where(:completion => true).count %></td>
				</tr>
			<% end %>
		<% end %>
	</tbody>
</table>

<h1>Create a new task:</h1>
<%= form_for @new_task do |form| %>
	<%= form.label :description %><br>
    <%= form.text_field :description %>
    <%= form.hidden_field :user_id, :value => current_user.id %>
   <%= form.submit 'Create Task!'%>
<% end %>

<h1>Weekly Leaderboards :</h1>
<table>
	<thead>	
		<tr>
			<th>No.</th>
			<th>Username</th>
			<th>Tomatoes Grown This Week</th>
		</tr>
	</thead>

	<tbody>
		<% number = 0%>
		<% leaderboard = User.all.each.sort_by{|user| user.tomatoes.where(:completion => true).count}.reverse %>
		<% leaderboard.each do |user| %>
				<tr>
					<td><%= number += 1 %></td>
					<td><%= user.email.scan(/[A-Za-z0-9]+@/).first[0..-2] %></td>
					<td><%= user.tomatoes.where(:completion => true).count %></td>
				</tr>
		<% end %>
	</tbody>
</table>


<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js"></script>

<script>

	let btns = document.querySelectorAll('.plant-seed-button')

	btns.forEach(function(btn) {
		btn.onclick = function(){
			$.ajaxSetup({
	    		headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') }
	  		});
			$.ajax({
			  	type: "POST",
			  	url: "/tomatoes",
			  	data: {user_id: "<%= current_user.id %>", task_id: btn.dataset.taskid },
			}).done(function(data) {
			  	var countDownDate = new Date().getTime() + (0.5*60000);
				// Update the count down every 1 second
				var x = setInterval(function() {

				  // Get todays date and time
				  var now = new Date().getTime();

				  // Find the distance between now and the count down date
				  var distance = countDownDate - now;

				  // Time calculations for days, hours, minutes and seconds
				  var days = Math.floor(distance / (1000 * 60 * 60 * 24));
				  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
				  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
				  var seconds = Math.floor((distance % (1000 * 60)) / 1000);

				  // Display the result in the element with id="demo"
				  document.getElementById("time_remaining").innerHTML = minutes + "m " + seconds + "s ";

				  // If the count down is finished, write some text 
				  if (distance <= 0) {
				  	clearInterval(x);
				  	document.getElementById("time_remaining").innerHTML = "";
					$.ajaxSetup({
						headers: { 'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content') }
					});
					$.ajax({
						type: "POST",
						url: "/tomatoes/complete",
						data: {id: data}
					}).done(function(){

							// Set the date we're counting down to
							var countDownDate = new Date().getTime() + (0.1*60000);

							// Update the count down every 1 second
							var y = setInterval(function() {

							  // Get todays date and time
							  var now = new Date().getTime();

							  // Find the distance between now and the count down date
							  var distance = countDownDate - now;

							  // Time calculations for days, hours, minutes and seconds
							  var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
							  var seconds = Math.floor((distance % (1000 * 60)) / 1000);

							  // Display the result in the element with id="demo"
							  document.getElementById("time_remaining").innerHTML = minutes + "m " + seconds + "s ";

							  // If the count down is finished, write some text 
							  if (distance <= 0) {
							    clearInterval(y);
							  	document.getElementById("time_remaining").innerHTML = "";
							    document.getElementById("alert_message").innerHTML = "Break Time OVER!";
							  }
							}, 1000);

					})

				  }
				}, 1000);
			   }
			 );
		}
	})
</script>


    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          playerVars: {
            listType:'playlist',
            list: 'PL-ZXjWfAJaSx8_fBKtKwrMKmcl-xBTGNP'
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      // var done = false;
      function onPlayerStateChange(event) {
        // if (event.data == YT.PlayerState.PLAYING && !done) {
        //   setTimeout(stopVideo, 6000);
        //   done = true;
        // }
      }
      // function stopVideo() {
      //   player.stopVideo();
      // }
    </script>
 